# =========================
# NoiseShield AI ¬∑ Quantum-Inspired Diagnostics
# =========================
import os
os.environ["STREAMLIT_SERVER_FILE_WATCHER_TYPE"] = "none"   # Prevent inotify crash

import streamlit as st
import numpy as np, pandas as pd, datetime as dt
from io import StringIO
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt

try:
    from fpdf import FPDF
    HAS_FPDF = True
except Exception:
    HAS_FPDF = False


# ---------- App meta ----------
st.set_page_config(page_title="NoiseShield AI", page_icon="üî∞", layout="centered")

# ---------- Session init ----------
defaults = {
    "results": {"Soil": None, "Health": None, "Water": None},
    "history": {"Soil": [], "Health": [], "Water": []},
    "last_stable": {"Soil": None, "Health": None, "Water": None},
    "theme_mode": "Dark",
}
for k,v in defaults.items(): st.session_state.setdefault(k,v)


# ---------- Theme ----------
theme_choice = st.sidebar.radio("Theme", ["Light", "Dark"],
    index=0 if st.session_state["theme_mode"]=="Light" else 1)
st.session_state["theme_mode"] = theme_choice
is_dark = st.session_state["theme_mode"]=="Dark"

bg   = "#0E1117" if is_dark else "#FFFFFF"
txt  = "#FAFAFA" if is_dark else "#111111"
acc  = "#00B4B4" if is_dark else "#0A84FF"
panel= "#151922" if is_dark else "#F7F9FC"

st.markdown(f"""
<style>
body,.stApp{{background:{bg};color:{txt};}}
.stButton>button{{background:{acc};color:white;border-radius:8px;font-weight:600;border:0;}}
.stProgress>div>div{{background:{acc}!important;}}
.panel{{background:{panel};padding:12px 14px;border-radius:10px;border:1px solid {acc}30;}}
.block-container{{max-width:980px;padding-top:1rem;}}
</style>
""", unsafe_allow_html=True)


# ---------- Language ----------
LANG = {
    "English": {
        "title": "NoiseShield AI ¬∑ Quantum-Inspired Diagnostics",
        "sdg2": "SDG 2 ¬∑ Zero Hunger",
        "sdg3": "SDG 3 ¬∑ Good Health",
        "sdg6": "SDG 6 ¬∑ Clean Water",
        "tabs": ["Soil (SDG 2)", "Health (SDG 3)", "Water (SDG 6)",
                 "Quantum View", "Reports", "SDG Dashboard", "Cross-Domain Stability"],
        "controls": "App Controls",
        "noise": "Simulated Sensor Noise (%)",
        "soil": "Soil Fertility Analysis (Offline)",
        "health": "Health Diagnostics (Offline)",
        "water": "Water Quality (Offline)",
        "quantum": "Quantum-Inspired View",
        "reports": "Local Reports (Offline)",
        "dashboard": "SDG Dashboard Summary",
        "stability": "Cross-Domain Stability (Noise vs Probability)",
        "predicted": "Predicted Result",
        "confidence": "Confidence",
        "baseline": "Baseline Probability",
        "var": "Disagreement Variance",
        "download_soil": "Download Soil Result (CSV)",
        "download_health": "Download Health Result (CSV)",
        "download_water": "Download Water Result (CSV)",
        "download_summary": "Download Summary (CSV)",
        "download_pdf": "Download PDF Report",
        "pdf_missing": "Install 'fpdf' to enable PDF report.",
        "why": "Why this result?",
        "last_safe": "Last Known Safe Reading",
        "unstable": "Data unstable ‚Äî showing last safe reading",
        "domain": "Domain",
        "prediction": "Prediction",
        "prob": "Probability",
        "conf": "Confidence",
        "time": "Timestamp",
        "overall": "Overall Sustainability Confidence",
        "excellent": "üü¢ Excellent",
        "moderate": "üü° Moderate",
        "needs": "üî¥ Needs Work",
        "trend": "Confidence Trends (last 3 per domain)",
        "caption": "Quantum-inspired, offline tool for soil, health, and water diagnostics in low-resource settings."
    },
    "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å": {
        "title": "‡∞®‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç‚Äå‡∞∑‡±Ä‡∞≤‡±ç‡∞°‡±ç AI ¬∑ ‡∞ï‡±ç‡∞µ‡∞æ‡∞Ç‡∞ü‡∞Æ‡±ç ‡∞™‡±ç‡∞∞‡±á‡∞∞‡∞ø‡∞§ ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞£‡∞≤‡±Å",
        "sdg2": "SDG 2 ¬∑ ‡∞Ü‡∞ï‡∞≤‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡±Ç‡∞≤‡∞®",
        "sdg3": "SDG 3 ¬∑ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Æ‡±Å",
        "sdg6": "SDG 6 ¬∑ ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞Æ‡±à‡∞® ‡∞®‡±Ä‡∞∞‡±Å",
        "tabs": ["‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø (SDG 2)", "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç (SDG 3)", "‡∞®‡±Ä‡∞∞‡±Å (SDG 6)",
                 "‡∞ï‡±ç‡∞µ‡∞æ‡∞Ç‡∞ü‡∞Æ‡±ç ‡∞µ‡±Ä‡∞Ø‡±Ç", "‡∞∞‡∞ø‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç‡∞∏‡±ç", "SDG ‡∞°‡±ç‡∞Ø‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç", "‡∞ï‡±ç‡∞∞‡∞æ‡∞∏‡±ç-‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç ‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞§‡±ç‡∞µ‡∞Ç"],
        "controls": "‡∞Ø‡∞æ‡∞™‡±ç ‡∞ï‡∞Ç‡∞ü‡±ç‡∞∞‡±ã‡∞≤‡±ç‡∞∏‡±ç",
        "noise": "‡∞∏‡±Ü‡∞®‡±ç‡∞∏‡∞æ‡∞∞‡±ç ‡∞∂‡∞¨‡±ç‡∞¶‡∞Ç (%)",
        "soil": "‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞∏‡∞æ‡∞∞‡∞µ‡∞Ç‡∞§‡∞§ ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£ (‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç)",
        "health": "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞£ (‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç)",
        "water": "‡∞®‡±Ä‡∞ü‡∞ø ‡∞®‡∞æ‡∞£‡±ç‡∞Ø‡∞§ (‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç)",
        "quantum": "‡∞ï‡±ç‡∞µ‡∞æ‡∞Ç‡∞ü‡∞Æ‡±ç ‡∞™‡±ç‡∞∞‡±á‡∞∞‡∞£ ‡∞µ‡±Ä‡∞Ø‡±Ç",
        "reports": "‡∞≤‡±ã‡∞ï‡∞≤‡±ç ‡∞∞‡∞ø‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç‡∞∏‡±ç (‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç)",
        "dashboard": "SDG ‡∞°‡±ç‡∞Ø‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç ‡∞∏‡∞Æ‡±ç‡∞Æ‡∞∞‡±Ä",
        "stability": "‡∞ï‡±ç‡∞∞‡∞æ‡∞∏‡±ç-‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç ‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞§‡±ç‡∞µ‡∞Ç (Noise vs Probability)",
        "predicted": "‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç",
        "confidence": "‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Ç",
        "baseline": "‡∞¨‡±á‡∞∏‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞Ç",
        "var": "‡∞µ‡∞ø‡∞≠‡±á‡∞¶‡∞Ç variance",
        "download_soil": "‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç (CSV)",
        "download_health": "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç (CSV)",
        "download_water": "‡∞®‡±Ä‡∞ü‡∞ø ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç (CSV)",
        "download_summary": "‡∞∏‡∞Æ‡±ç‡∞Æ‡∞∞‡±Ä (CSV)",
        "download_pdf": "PDF ‡∞∞‡∞ø‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç",
        "pdf_missing": "'fpdf' ‡∞á‡∞®‡±ç‚Äå‡∞∏‡±ç‡∞ü‡∞æ‡∞≤‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (pip install fpdf).",
        "why": "‡∞à ‡∞´‡∞≤‡∞ø‡∞§‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡∞æ‡∞∞‡∞£‡∞Ç?",
        "last_safe": "‡∞ó‡∞§ ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§ ‡∞∞‡±Ä‡∞°‡∞ø‡∞Ç‡∞ó‡±ç",
        "unstable": "‡∞°‡±á‡∞ü‡∞æ ‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞≤‡±á‡∞¶‡±Å ‚Äî ‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§ ‡∞∞‡±Ä‡∞°‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ö‡±Ç‡∞™‡∞ø‡∞Ç‡∞™‡±Å",
        "domain": "‡∞°‡±ä‡∞Æ‡±à‡∞®‡±ç",
        "prediction": "‡∞´‡∞≤‡∞ø‡∞§‡∞Ç",
        "prob": "‡∞∏‡∞Ç‡∞≠‡∞æ‡∞µ‡±ç‡∞Ø‡∞§",
        "conf": "‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Ç",
        "time": "‡∞∏‡∞Æ‡∞Ø‡∞Ç",
        "overall": "‡∞∏‡∞Æ‡∞ó‡±ç‡∞∞ ‡∞∏‡±Å‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞§ ‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Ç",
        "excellent": "üü¢ ‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Ç",
        "moderate": "üü° ‡∞∏‡∞∞‡∞æ‡∞∏‡∞∞‡∞ø",
        "needs": "üî¥ ‡∞Æ‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞≤‡±Å ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç",
        "trend": "‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Ç ‡∞ü‡±ç‡∞∞‡±Ü‡∞Ç‡∞°‡±ç‡∞∏‡±ç (‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø 3)",
        "caption": "‡∞ï‡±ç‡∞µ‡∞æ‡∞Ç‡∞ü‡∞Æ‡±ç ‡∞™‡±ç‡∞∞‡±á‡∞∞‡∞£‡∞§‡±ã, ‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç ‡∞ü‡±Ç‡∞≤‡±ç ‚Äî ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞µ‡∞®‡∞∞‡±Å‡∞≤ ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞æ‡∞≤‡∞ï‡±Å."
    },
    "‡§π‡§ø‡§Ç‡§¶‡•Ä": {
        "title": "NoiseShield AI ¬∑ ‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ-‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§®‡§ø‡§¶‡§æ‡§®",
        "sdg2": "SDG 2 ¬∑ ‡§≠‡•Å‡§ñ‡§Æ‡§∞‡•Ä ‡§Æ‡•Å‡§ï‡•ç‡§§",
        "sdg3": "SDG 3 ¬∑ ‡§â‡§§‡•ç‡§§‡§Æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
        "sdg6": "SDG 6 ¬∑ ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ ‡§™‡§æ‡§®‡•Ä",
        "tabs": ["‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (SDG 2)", "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø (SDG 3)", "‡§ú‡§≤ (SDG 6)",
                 "‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ ‡§¶‡•É‡§∂‡•ç‡§Ø", "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏", "SDG ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°", "‡§ï‡•ç‡§∞‡•â‡§∏-‡§°‡•ã‡§Æ‡•á‡§® ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ"],
        "controls": "‡§è‡§™ ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤‡•ç‡§∏",
        "noise": "‡§∏‡•á‡§Ç‡§∏‡§∞ ‡§∂‡•ã‡§∞ (%)",
        "soil": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§â‡§∞‡•ç‡§µ‡§∞‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "health": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "water": "‡§ú‡§≤ ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "quantum": "‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ-‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§¶‡•É‡§∂‡•ç‡§Ø",
        "reports": "‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "dashboard": "SDG ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§∏‡§æ‡§∞",
        "stability": "‡§ï‡•ç‡§∞‡•â‡§∏-‡§°‡•ã‡§Æ‡•á‡§® ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ (Noise vs Probability)",
        "predicted": "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "confidence": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "baseline": "‡§¨‡•á‡§∏‡§≤‡§æ‡§á‡§® ‡§™‡•ç‡§∞‡§æ‡§Ø‡§ø‡§ï‡§§‡§æ",
        "var": "‡§Ö‡§∏‡§π‡§Æ‡§§‡§ø variance",
        "download_soil": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ (CSV)",
        "download_health": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ (CSV)",
        "download_water": "‡§ú‡§≤ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ (CSV)",
        "download_summary": "‡§∏‡§æ‡§∞ (CSV)",
        "download_pdf": "PDF ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü",
        "pdf_missing": "'fpdf' ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç (pip install fpdf).",
        "why": "‡§Ø‡§π ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç?",
        "last_safe": "‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ä‡§°‡§ø‡§Ç‡§ó",
        "unstable": "‡§°‡•á‡§ü‡§æ ‡§Ö‡§∏‡•ç‡§•‡§ø‡§∞ ‚Äî ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ä‡§°‡§ø‡§Ç‡§ó ‡§¶‡§ø‡§ñ‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç",
        "domain": "‡§°‡•ã‡§Æ‡•á‡§®",
        "prediction": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "prob": "‡§™‡•ç‡§∞‡§æ‡§Ø‡§ø‡§ï‡§§‡§æ",
        "conf": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "time": "‡§∏‡§Æ‡§Ø",
        "overall": "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "excellent": "üü¢ ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü",
        "moderate": "üü° ‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
        "needs": "üî¥ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï",
        "trend": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ü‡•ç‡§∞‡•á‡§Ç‡§° (‡§™‡§ø‡§õ‡§≤‡•á 3)",
        "caption": "‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ-‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§, ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§ü‡•Ç‡§≤ ‚Äî ‡§ï‡§Æ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è‡•§"
    },
    "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç": {
        "title": "NoiseShield AI ¬∑ ‡Æï‡ØÅ‡Æµ‡Ææ‡Æ£‡Øç‡Æü‡ÆÆ‡Øç ‡Æä‡Æï‡Øç‡Æï‡ÆÆ‡ØÇ‡Æü‡Øç‡Æü‡Æø‡ÆØ ‡Æ®‡Ææ‡Æü‡ØÅ‡Æï‡Ææ‡Æ£‡Æ≤‡Øç",
        "sdg2": "SDG 2 ¬∑ ‡Æ™‡Æö‡Æø ‡Æí‡Æ¥‡Æø‡Æ™‡Øç‡Æ™‡ØÅ",
        "sdg3": "SDG 3 ¬∑ ‡Æ®‡Æ≤‡Øç‡Æ≤ ‡ÆÜ‡Æ∞‡Øã‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç",
        "sdg6": "SDG 6 ¬∑ ‡Æ§‡ØÇ‡ÆØ‡Øç‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡Æ®‡ØÄ‡Æ∞‡Øç",
        "tabs": ["‡ÆÆ‡Æ£‡Øç (SDG 2)", "‡ÆÜ‡Æ∞‡Øã‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç (SDG 3)", "‡Æ®‡ØÄ‡Æ∞‡Øç (SDG 6)",
                 "‡Æï‡ØÅ‡Æµ‡Ææ‡Æ£‡Øç‡Æü‡ÆÆ‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æö‡Æø", "‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç", "SDG ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ", "‡Æï‡ØÅ‡Æ±‡ØÅ‡Æï‡Øç‡Æï‡ØÅ-‡Æµ‡Æø‡Æ≥‡Øà‡Æ®‡Æø‡Æ≤‡Øà ‡Æ®‡Æø‡Æ≤‡Øà‡Æ§‡Øç‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà"],
        "controls": "‡ÆÖ‡Æ™‡Øç ‡Æï‡Æü‡Øç‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç",
        "noise": "‡Æö‡ØÜ‡Æ©‡Øç‡Æö‡Ææ‡Æ∞‡Øç ‡Æö‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç (%)",
        "soil": "‡ÆÆ‡Æ£‡Øç ‡Æµ‡Æ≥‡ÆÆ‡Øç ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ (‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Øç)",
        "health": "‡Æ®‡Øã‡ÆØ‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡Æ§‡Æ≤‡Øç (‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Øç)",
        "water": "‡Æ®‡ØÄ‡Æ∞‡Øç ‡Æ§‡Æ∞‡ÆÆ‡Øç (‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Øç)",
        "quantum": "‡Æï‡ØÅ‡Æµ‡Ææ‡Æ£‡Øç‡Æü‡ÆÆ‡Øç-‡Æä‡Æï‡Øç‡Æï ‡Æï‡Ææ‡Æü‡Øç‡Æö‡Æø",
        "reports": "‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÇ‡Æ∞‡Øç ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç (‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Øç)",
        "dashboard": "SDG ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ ‡Æö‡ØÅ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Øç",
        "stability": "‡Æï‡ØÅ‡Æ±‡ØÅ‡Æï‡Øç‡Æï‡ØÅ-‡Æµ‡Æø‡Æ≥‡Øà‡Æ®‡Æø‡Æ≤‡Øà ‡Æ®‡Æø‡Æ≤‡Øà‡Æ§‡Øç‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà (Noise vs Probability)",
        "predicted": "‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ",
        "confidence": "‡Æ®‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Øà",
        "baseline": "‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà ‡Æö‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç",
        "var": "‡Æµ‡Øá‡Æ±‡ØÅ‡Æ™‡Ææ‡Æü‡ØÅ variance",
        "download_soil": "‡ÆÆ‡Æ£‡Øç ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ (CSV)",
        "download_health": "‡ÆÜ‡Æ∞‡Øã‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ (CSV)",
        "download_water": "‡Æ®‡ØÄ‡Æ∞‡Øç ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ (CSV)",
        "download_summary": "‡Æö‡ØÅ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Øç (CSV)",
        "download_pdf": "PDF ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà",
        "pdf_missing": "'fpdf' ‡Æ®‡Æø‡Æ±‡ØÅ‡Æµ‡Æµ‡ØÅ‡ÆÆ‡Øç (pip install fpdf).",
        "why": "‡Æè‡Æ©‡Øç ‡Æá‡Æ®‡Øç‡Æ§ ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ?",
        "last_safe": "‡Æï‡Æü‡Øà‡Æö‡Æø ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æ© ‡Æ∞‡ØÄ‡Æü‡Æø‡Æô‡Øç",
        "unstable": "‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æ®‡Æø‡Æ≤‡Øà‡Æï‡ØÅ‡Æ≤‡Øà‡Æµ‡ØÅ ‚Äî ‡Æï‡Æü‡Øà‡Æö‡Æø‡Æ™‡Øç ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æ© ‡Æ∞‡ØÄ‡Æü‡Æø‡Æô‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ",
        "domain": "‡Æ§‡ØÅ‡Æ±‡Øà",
        "prediction": "‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ",
        "prob": "‡Æö‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç",
        "conf": "‡Æ®‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Øà",
        "time": "‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
        "overall": "‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æ®‡Æø‡Æ≤‡Øà‡Æ§‡Øç‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡Æ®‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Øà",
        "excellent": "üü¢ ‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡ØÅ",
        "moderate": "üü° ‡Æ®‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ∞‡ÆÆ‡Øç",
        "needs": "üî¥ ‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Ææ‡Æü‡ØÅ ‡Æ§‡Øá‡Æµ‡Øà",
        "trend": "‡Æ®‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ (‡Æï‡Æü‡Øà‡Æö‡Æø 3)",
        "caption": "‡Æï‡ØÅ‡Æµ‡Ææ‡Æ£‡Øç‡Æü‡ÆÆ‡Øç ‡Æä‡Æï‡Øç‡Æï‡ÆÆ‡ØÇ‡Æü‡Øç‡Æü‡Æø‡ÆØ, ‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Øç ‡Æï‡Æ∞‡ØÅ‡Æµ‡Æø ‚Äî ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡Æµ‡Æ≥ ‡Æ™‡Æï‡ØÅ‡Æ§‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ."
    },
    "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ": {
        "title": "NoiseShield AI ¬∑ ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ-‡¶™‡ßç‡¶∞‡¶æ‡¶£‡¶ø‡¶§ ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶ó‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ï",
        "sdg2": "SDG 2 ¬∑ ‡¶ï‡ßç‡¶∑‡ßÅ‡¶ß‡¶æ‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§",
        "sdg3": "SDG 3 ¬∑ ‡¶∏‡ßÅ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø",
        "sdg6": "SDG 6 ¬∑ ‡¶¨‡¶ø‡¶∂‡ßÅ‡¶¶‡ßç‡¶ß ‡¶™‡¶æ‡¶®‡¶ø",
        "tabs": ["‡¶Æ‡¶æ‡¶ü‡¶ø (SDG 2)", "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø (SDG 3)", "‡¶™‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ú‡¶≤ (SDG 6)",
                 "‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ ‡¶≠‡¶ø‡¶â", "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü", "SDG ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°", "‡¶ï‡ßç‡¶∞‡¶∏-‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨"],
        "controls": "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤",
        "noise": "‡¶∏‡ßá‡¶®‡ßç‡¶∏‡¶∞ ‡¶®‡¶Ø‡¶º‡ßá‡¶ú (%)",
        "soil": "‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶â‡¶∞‡ßç‡¶¨‡¶∞‡¶§‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®)",
        "health": "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º (‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®)",
        "water": "‡¶ú‡¶≤‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶Æ‡¶æ‡¶® (‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®)",
        "quantum": "‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ-‡¶™‡ßç‡¶∞‡¶æ‡¶£‡¶ø‡¶§ ‡¶≠‡¶ø‡¶â",
        "reports": "‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü (‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®)",
        "dashboard": "SDG ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™",
        "stability": "‡¶ï‡ßç‡¶∞‡¶∏-‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨ (Noise vs Probability)",
        "predicted": "‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßá‡¶Ø‡¶º ‡¶´‡¶≤‡¶æ‡¶´‡¶≤",
        "confidence": "‡¶Ü‡¶∏‡ßç‡¶•‡¶æ",
        "baseline": "‡¶¨‡ßá‡¶∏‡¶≤‡¶æ‡¶á‡¶® ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø‡¶§‡¶æ",
        "var": "‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ variance",
        "download_soil": "‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ (CSV)",
        "download_health": "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ (CSV)",
        "download_water": "‡¶ú‡¶≤ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ (CSV)",
        "download_summary": "‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ (CSV)",
        "download_pdf": "PDF ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü",
        "pdf_missing": "'fpdf' ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (pip install fpdf).",
        "why": "‡¶è‡¶á ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶ï‡ßá‡¶®?",
        "last_safe": "‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶∞‡¶ø‡¶°‡¶ø‡¶Ç",
        "unstable": "‡¶°‡ßá‡¶ü‡¶æ ‡¶Ö‡¶∏‡ßç‡¶•‡¶ø‡¶∞ ‚Äî ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶∞‡¶ø‡¶°‡¶ø‡¶Ç ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá",
        "domain": "‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®",
        "prediction": "‡¶´‡¶≤‡¶æ‡¶´‡¶≤",
        "prob": "‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø‡¶§‡¶æ",
        "conf": "‡¶Ü‡¶∏‡ßç‡¶•‡¶æ",
        "time": "‡¶∏‡¶Æ‡¶Ø‡¶º",
        "overall": "‡¶∏‡¶Æ‡¶ó‡ßç‡¶∞ ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶Ü‡¶∏‡ßç‡¶•‡¶æ",
        "excellent": "üü¢ ‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞",
        "moderate": "üü° ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶Æ‡¶æ‡¶ù‡¶ø",
        "needs": "üî¥ ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        "trend": "‡¶Ü‡¶∏‡ßç‡¶•‡¶æ ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ (‡¶∂‡ßá‡¶∑ 3)",
        "caption": "‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ-‡¶™‡ßç‡¶∞‡¶æ‡¶£‡¶ø‡¶§, ‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶® ‡¶ü‡ßÅ‡¶≤ ‚Äî ‡¶∏‡ßç‡¶¨‡¶≤‡ßç‡¶™ ‡¶∏‡¶Æ‡ßç‡¶™‡¶¶ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏‡ßá‡•§"
    },
    "‡§Æ‡§∞‡§æ‡§†‡•Ä": {
        "title": "NoiseShield AI ¬∑ ‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ-‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§®‡§ø‡§¶‡§æ‡§®",
        "sdg2": "SDG 2 ¬∑ ‡§â‡§™‡§æ‡§∏‡§Æ‡§æ‡§∞ ‡§®‡§ø‡§∞‡•ç‡§Æ‡•Ç‡§≤‡§®",
        "sdg3": "SDG 3 ¬∑ ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•á ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø",
        "sdg6": "SDG 6 ¬∑ ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ ‡§™‡§æ‡§£‡•Ä",
        "tabs": ["‡§Æ‡§æ‡§§‡•Ä (SDG 2)", "‡§Ü‡§∞‡•ã‡§ó‡ßç‡¶Ø (SDG 3)", "‡§™‡§æ‡§£‡•Ä (SDG 6)",
                 "‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ ‡§¶‡•É‡§∂‡•ç‡§Ø", "‡§Ö‡§π‡§µ‡§æ‡§≤", "SDG ‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§°", "‡§ï‡•ç‡§∞‡•â‡§∏-‡§°‡•ã‡§Æ‡•á‡§® ‡§∏‡•ç‡§•‡•à‡§∞‡•ç‡§Ø"],
        "controls": "‡§Ö‚Äç‡•Ö‡§™ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£",
        "noise": "‡§∏‡•á‡§®‡•ç‡§∏‡§∞ ‡§®‡•â‡§à‡§ú (%)",
        "soil": "‡§Æ‡§æ‡§§‡•Ä ‡§∏‡•Å‡§™‡•Ä‡§ï‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "health": "‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "water": "‡§™‡§æ‡§£‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "quantum": "‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ-‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§¶‡•É‡§∂‡•ç‡§Ø",
        "reports": "‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Ö‡§π‡§µ‡§æ‡§≤ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)",
        "dashboard": "SDG ‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂",
        "stability": "‡§ï‡•ç‡§∞‡•â‡§∏-‡§°‡•ã‡§Æ‡•á‡§® ‡§∏‡•ç‡§•‡•à‡§∞‡•ç‡§Ø (Noise vs Probability)",
        "predicted": "‡§≠‡§æ‡§ï‡•Ä‡§§ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "confidence": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "baseline": "‡§¨‡•á‡§∏‡§≤‡§æ‡§á‡§® ‡§™‡•ç‡§∞‡•â‡§¨‡•Ö‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä",
        "var": "‡§Æ‡§§‡§≠‡•á‡§¶ variance",
        "download_soil": "‡§Æ‡§æ‡§§‡•Ä ‡§®‡§ø‡§ï‡§æ‡§≤ (CSV)",
        "download_health": "‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§®‡§ø‡§ï‡§æ‡§≤ (CSV)",
        "download_water": "‡§™‡§æ‡§£‡•Ä ‡§®‡§ø‡§ï‡§æ‡§≤ (CSV)",
        "download_summary": "‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ (CSV)",
        "download_pdf": "PDF ‡§Ö‡§π‡§µ‡§æ‡§≤",
        "pdf_missing": "'fpdf' ‡§á‡§®‡•ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§æ (pip install fpdf).",
        "why": "‡§π‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡§æ?",
        "last_safe": "‡§∂‡•á‡§µ‡§ü‡§ö‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ä‡§°‡§ø‡§Ç‡§ó",
        "unstable": "‡§°‡•á‡§ü‡§æ ‡§Ö‡§∏‡•ç‡§•‡§ø‡§∞ ‚Äî ‡§∂‡•á‡§µ‡§ü‡§ö‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ä‡§°‡§ø‡§Ç‡§ó ‡§¶‡§æ‡§ñ‡§µ‡§≤‡•á",
        "domain": "‡§°‡•ã‡§Æ‡•á‡§®",
        "prediction": "‡§®‡§ø‡§ï‡§æ‡§≤",
        "prob": "‡§™‡•ç‡§∞‡•â‡§¨‡•Ö‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä",
        "conf": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "time": "‡§µ‡•á‡§≥",
        "overall": "‡§è‡§ï‡•Ç‡§£ ‡§∏‡•ç‡§•‡•à‡§∞‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "excellent": "üü¢ ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü",
        "moderate": "üü° ‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
        "needs": "üî¥ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§£‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï",
        "trend": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ü‡•ç‡§∞‡•á‡§Ç‡§° (‡§∂‡•á‡§µ‡§ü‡§ö‡•á 3)",
        "caption": "‡§ï‡•ç‡§µ‡§æ‡§Ç‡§ü‡§Æ-‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§, ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§∏‡§æ‡§ß‡§® ‚Äî ‡§ï‡§Æ‡•Ä ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§≠‡§æ‡§ó‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä."
    }
}

ui_lang = st.sidebar.selectbox("Language", list(LANG.keys()), index=0)
L = LANG[ui_lang]


# ---------- Banner ----------
st.markdown(f"<h2 style='text-align:center;font-weight:800;'>{L['title']}</h2>",unsafe_allow_html=True)


# ---------- Utilities ----------
def seed_rng(s=42): return np.random.default_rng(s)
def inject_noise(X,p,r=None):
    if p<=0:return X.copy()
    r=r or seed_rng(123);return X*(1+r.normal(0,p/100,size=X.shape))
def make_submodels_from(base,eps=0.03,n=3):
    sc=base.named_steps['standardscaler'];lr=base.named_steps['logisticregression'];subs=[]
    for k in range(n):
        lrk=LogisticRegression();lrk.classes_=lr.classes_
        lrk.coef_=lr.coef_*(1+(k-1)*eps);lrk.intercept_=lr.intercept_*(1+(k-1)*eps)
        p=make_pipeline(StandardScaler());p.fit(np.zeros((1,len(sc.scale_))),[0])
        p.named_steps['standardscaler'].mean_=sc.mean_.copy()
        p.named_steps['standardscaler'].scale_=sc.scale_.copy()
        p.steps.append(('logisticregression',lrk));subs.append(p)
    return subs
def ensemble_predict_proba(subs,X):
    probs=np.array([m.predict_proba(X)[0,1] for m in subs]);var=float(np.var(probs))
    w=np.ones_like(probs)/len(probs) if var>0.02 else np.exp(-(probs-probs.mean())**2/(2*0.0025))
    w/=w.sum();return float(w@probs),probs,w,var
def df_to_csv_bytes(df): s=StringIO();df.to_csv(s,index=False);return s.getvalue().encode()
def pdf_report_bytes(dom,row,label,conf,noise):
    if not HAS_FPDF:return None
    p=FPDF();p.add_page();p.set_font("Arial","B",16)
    p.cell(0,10,"NoiseShield Diagnostic Report",ln=1,align='C')
    p.set_font("Arial","",12)
    for k,v in [("Domain",dom),("Prediction",label),("Confidence",f"{conf}%"),("Noise",f"{noise}%")]:
        p.cell(0,8,f"{k}: {v}",ln=1)
    return p.output(dest='S').encode('latin-1')


# ---------- Synthetic Training ----------
def synth_health_data(n=400,r=None):
    r=r or seed_rng(1)
    Hb=r.normal(13,2.2,n).clip(6,20);WBC=r.normal(7000,2500,n).clip(2e3,3e4)
    PLT=r.normal(250000,80000,n).clip(7e4,8e5)
    Temp=r.normal(36.8,0.7,n).clip(34.5,41.5);Pulse=r.normal(80,15,n).clip(45,160)
    X=np.c_[Hb,WBC,PLT,Temp,Pulse];y=((Hb<11)|((Temp>37.8)&(WBC>10000))|(PLT<120000)).astype(int);return X,y
def synth_water_data(n=400,r=None):
    r=r or seed_rng(2);pH=r.normal(7.1,0.6,n).clip(4.5,9.5)
    turb=np.abs(r.normal(5,15,n)).clip(0,200);tds=np.abs(r.normal(300,250,n)).clip(50,2500)
    ec=np.abs(r.normal(600,400,n)).clip(50,4500);temp=r.normal(24,6,n).clip(5,45)
    X=np.c_[pH,turb,tds,ec,temp];y=((turb>10)|(tds>1000)|(ec>2000)|(pH<6)|(pH>8.5)).astype(int);return X,y
@st.cache_resource
def train_baselines():
    Xh,yh=synth_health_data();Xw,yw=synth_water_data()
    hp=make_pipeline(StandardScaler(),LogisticRegression(max_iter=500))
    wp=make_pipeline(StandardScaler(),LogisticRegression(max_iter=500))
    hp.fit(Xh,yh);wp.fit(Xw,yw)
    # Soil baseline
    r=seed_rng(3);n=400
    pH=r.normal(6.5,0.8,n).clip(3.5,9.5);N=r.normal(50,25,n).clip(0,200)
    P=r.normal(40,20,n).clip(0,200);K=r.normal(150,60,n).clip(0,300);M=r.normal(30,15,n).clip(0,100)
    X=np.c_[pH,N,P,K,M];y=((N<30)|(P<20)|(K<80)|(pH<5.5)|(pH>8.5)).astype(int)
    sp=make_pipeline(StandardScaler(),LogisticRegression(max_iter=500));sp.fit(X,y)
    return sp,hp,wp
soil_pipe,health_pipe,water_pipe=train_baselines()


# ---------- Controls ----------
st.sidebar.header(L["controls"])
noise=st.sidebar.slider(L["noise"],0,100,0,5)
tabs=st.tabs(L["tabs"])


# ---------- Soil ----------
with tabs[0]:
    st.subheader("Soil Fertility Analysis")
    c1,c2=st.columns(2)
    with c1:
        spH=st.number_input("Soil pH",3.,10.,6.5)
        N=st.number_input("Nitrogen (mg/kg)",0.,200.,40.)
        P=st.number_input("Phosphorus (mg/kg)",0.,200.,30.)
    with c2:
        K=st.number_input("Potassium (mg/kg)",0.,300.,120.)
        M=st.number_input("Moisture (%)",0.,100.,25.)
    X=np.array([[spH,N,P,K,M]]);Xn=inject_noise(X,noise)
    if st.button("Run Soil Analysis"):
        subs=make_submodels_from(soil_pipe,0.04)
        p_ens,subs_p,_,var=ensemble_predict_proba(subs,Xn)
        label="Nutrient Deficient" if p_ens>=0.5 else "Fertile"
        conf=round(p_ens*100,2)
        st.write(f"**{L['predicted']}** {label}")
        st.progress(int(conf))
        st.write(f"{L['confidence']}: {conf}% ¬∑ {L['var']}: {var:.4f}")
        fig,ax=plt.subplots();ax.bar([f"S{i+1}" for i in range(len(subs_p))],subs_p)
        ax.axhline(p_ens,color='r',ls='--',label='Final');ax.legend();ax.set_ylim(0,1);st.pyplot(fig)
        if HAS_FPDF:
            pdf=pdf_report_bytes("Soil",{"pH":spH},label,conf,noise)
            st.download_button("üìÑ PDF",pdf,"soil_report.pdf")


# ---------- Health ----------
with tabs[1]:
    st.subheader("Health Diagnostics")
    hb=st.number_input("Hemoglobin (g/dL)",0.,25.,12.5)
    wbc=st.number_input("WBC (cells/¬µL)",0.,3e4,7e3)
    pltlt=st.number_input("Platelets (cells/¬µL)",0.,9e5,2.5e5)
    temp=st.number_input("Body Temp (¬∞C)",30.,45.,36.8)
    pulse=st.number_input("Pulse Rate (bpm)",30.,200.,80.)
    X=np.array([[hb,wbc,pltlt,temp,pulse]]);Xn=inject_noise(X,noise)
    if st.button("Run Health Analysis"):
        subs=make_submodels_from(health_pipe,0.04)
        p_ens,subs_p,_,var=ensemble_predict_proba(subs,Xn)
        label="Possible Condition" if p_ens>=0.5 else "Healthy"
        conf=round(p_ens*100,2)
        st.write(f"**{L['predicted']}** {label}")
        st.progress(int(conf))
        fig,ax=plt.subplots();ax.bar([f"S{i+1}" for i in range(len(subs_p))],subs_p)
        ax.axhline(p_ens,color='r',ls='--',label='Final');ax.legend();ax.set_ylim(0,1);st.pyplot(fig)


# ---------- Water ----------
with tabs[2]:
    st.subheader("Water Quality Analysis")
    ph=st.number_input("pH",0.,14.,7.2)
    turb=st.number_input("Turbidity (NTU)",0.,500.,5.)
    tds=st.number_input("TDS (ppm)",0.,5000.,300.)
    ec=st.number_input("EC (¬µS/cm)",0.,10000.,600.)
    wtemp=st.number_input("Water Temp (¬∞C)",0.,60.,25.)
    X=np.array([[ph,turb,tds,ec,wtemp]]);Xn=inject_noise(X,noise)
    if st.button("Run Water Analysis"):
        subs=make_submodels_from(water_pipe,0.04)
        p_ens,subs_p,_,var=ensemble_predict_proba(subs,Xn)
        label="Contaminated" if p_ens>=0.5 else "Safe"
        conf=round(p_ens*100,2)
        st.write(f"**{L['predicted']}** {label}")
        st.progress(int(conf))
        fig,ax=plt.subplots();ax.bar([f"S{i+1}" for i in range(len(subs_p))],subs_p)
        ax.axhline(p_ens,color='r',ls='--',label='Final');ax.legend();ax.set_ylim(0,1);st.pyplot(fig)


# ---------- Quantum View ----------
with tabs[3]:
    st.subheader("Quantum-Inspired View")
    st.write("‚Ä¢ Multiple submodels ‚âà amplitude paths.")
    st.write("‚Ä¢ High disagreement ‚Üí equalized weights ‚Üí destructive interference.")
    st.write("‚Ä¢ Agreement ‚Üí constructive reinforcement ‚Üí stability.")
    st.markdown(f"<div class='panel'>{L['note_panel']}</div>",unsafe_allow_html=True)


# ---------- Reports ----------
with tabs[4]:
    st.subheader("Reports (Summary)")
    rows=[]
    for d in ["Soil","Health","Water"]:
        r=st.session_state["results"].get(d)
        if r: rows.append({L["domain"]:d,L["prediction"]:r.get("label","‚Äî"),
                           L["prob"]:r.get("prob",0),L["conf"]:r.get("confidence",0),
                           L["time"]:r.get("time","‚Äî")})
    df=pd.DataFrame(rows or [{L["domain"]:"‚Äî",L["prediction"]:"‚Äî"}])
    df.replace("‚Äî",np.nan,inplace=True)
    st.dataframe(df,use_container_width=True)
    st.download_button("‚¨áÔ∏è Download Summary CSV",df_to_csv_bytes(df),"noiseshield_summary.csv","text/csv")


# ---------- Dashboard ----------
with tabs[5]:
    st.subheader(L["overall"])
    res=st.session_state["results"]
    vals=[(res[d] or {}).get("confidence",0) for d in ["Soil","Health","Water"]]
    overall=round(np.mean(vals),1)
    status=L["excellent"] if overall>=80 else (L["moderate"] if overall>=50 else L["needs"])
    st.metric(L["overall"],f"{overall}%",status)
    st.caption(L["caption"])


# ---------- Cross-Domain Stability ----------
with tabs[6]:
    st.subheader("Cross-Domain Stability (Noise vs Probability)")
    lvls=[0,20,40,60,80,100]
    def rc(pipe,X):
        subs=make_submodels_from(pipe,0.04)
        b,e=[],[]
        for n in lvls:
            Xn=inject_noise(X,n)
            b.append(pipe.predict_proba(Xn)[0,1])
            e.append(ensemble_predict_proba(subs,Xn)[0])
        return np.array(b),np.array(e)
    soil_b,soil_e=rc(soil_pipe,np.array([[6.5,40,30,120,25]]))
    health_b,health_e=rc(health_pipe,np.array([[12.5,7000,250000,36.8,80]]))
    water_b,water_e=rc(water_pipe,np.array([[7.2,5,300,600,25]]))
    for title,base,ens in [("Soil",soil_b,soil_e),("Health",health_b,health_e),("Water",water_b,water_e)]:
        st.markdown(f"**{title}**")
        fig,ax=plt.subplots()
        ax.plot(lvls,base,"o-",label="Baseline (LR)")
        ax.plot(lvls,ens,"o-",label="Interference Ensemble")
        ax.set_xlabel("Noise (%)");ax.set_ylabel("Positive Probability");ax.set_ylim(0,1);ax.legend()
        st.pyplot(fig)
